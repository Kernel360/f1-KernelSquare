spring:
  profiles:
    active: local
    group:
      local: common, local-db
      prod1: common, prod-db, prod1-server
      prod2: common, prod-db, prod2-server

server:
  env: develop
  port: 8501

dbInfo: rds

serverName: kernelsquare-develop

---

spring:
  config:
    activate:
      on-profile: common

  # file upload max size (파일 업로드 크기 설정)
  servlet:
    multipart:
      max-file-size: 3MB
      max-request-size: 3MB

  datasource:
    url: ${LOCAL_DB_URL}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${LOCAL_DB_HOST}
    password: ${LOCAL_DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: none

    properties:
      hibernate:
        format_sql: true
        show_sql: true

    database: mysql

    database-platform: org.hibernate.dialect.MySQL8Dialect

  jackson:
    property-naming-strategy: SNAKE_CASE

    # ====> 소켓 통신의 임시 화면을 위함, 정식 화면이 생기면 삭제 할 것 !!
    serialization:
      fail-on-empty-beans: false
  # <====

  data:
    mongodb:
      uri: ${MONGO_URI}
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}


  security:
    jwt:
      header: Authorization
      secret: ${JWT_SECRET_KEY}
      access-token-validity-in-seconds: 3600     # 1시간
      refresh-token-validity-in-seconds: 1_209_600  # 2주

    oauth2:
      client:
        registration:
          github:
            client-id: ${SOCIAL_GITHUB_CLIENT_ID}
            client-secret: ${SOCIAL_GITHUB_CLIENT_SECRET}
            redirect-uri: http://localhost:8501/login/oauth2/code/github
            scope:
              - user:email

  flyway:
    enabled: false
    baseline-on-migrate: true
    out-of-order: true

  # ====> 소켓 통신의 임시 화면을 위함, 정식 화면이 생기면 삭제 할 것 !!
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: false
  freemarker:
    cache: false
# <====

logging.level:
  org.hibernate.SQL: debug
  #  org.hibernate.type: trace
  org.springframework.security: debug
  org.springframework.security.oauth2.client: DEBUG

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET_NAME}
    stack.auto: false
    region.static: ${S3_REGION}
    credentials:
      accessKey: ${AWS_ACCESS_KEY}
      secretKey: ${AWS_ACCESS_SECRET}

kafka:
  url: ${KAFKA_URL}

custom:
  domain:
    image:
      baseUrl: ${BASE_URL}

chatgpt:
  rest-api-key: ${CHAT_GPT_API_KEY}
  chat-api-url: https://api.openai.com/v1/chat/completions

management:
  endpoints:
    web:
      exposure:
        include: prometheus, health, info, metrics, tempo

---

spring:
  config:
    activate:
      on-profile: prod1-server

serverName: kernelsquare-prod1

dbInfo: rds

server:
  port: 8501

---

spring:
  config:
    activate:
      on-profile: prod2-server

serverName: kernelsquare-prod2

dbInfo: rds

server:
  port: 8502
